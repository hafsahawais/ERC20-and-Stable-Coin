/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { DepositorCoin, DepositorCoinInterface } from "../DepositorCoin";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "redeem",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040518060400160405280600d81526020017f4465706f7369746f72436f696e000000000000000000000000000000000000008152506040518060400160405280600381526020017f535443000000000000000000000000000000000000000000000000000000000081525081600190805190602001906200009692919062000264565b508060029080519060200190620000af92919062000264565b50620000cb3368056bc75e2d631000006200011460201b60201c565b505033600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620004bf565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000186576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200017d9062000375565b60405180910390fd5b80600080828254620001999190620003d0565b9250508190555080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254620001f19190620003d0565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200025891906200043e565b60405180910390a35050565b82805462000272906200048a565b90600052602060002090601f016020900481019282620002965760008555620002e2565b82601f10620002b157805160ff1916838001178555620002e2565b82800160010185558215620002e2579182015b82811115620002e1578251825591602001919060010190620002c4565b5b509050620002f19190620002f5565b5090565b5b8082111562000310576000816000905550600101620002f6565b5090565b600082825260208201905092915050565b7f6d696e7420746f207a65726f2061646472657373000000000000000000000000600082015250565b60006200035d60148362000314565b91506200036a8262000325565b602082019050919050565b6000602082019050818103600083015262000390816200034e565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620003dd8262000397565b9150620003ea8362000397565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620004225762000421620003a1565b5b828201905092915050565b620004388162000397565b82525050565b60006020820190506200045560008301846200042d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620004a357607f821691505b602082108103620004b957620004b86200045b565b5b50919050565b6115d780620004cf6000396000f3fe6080604052600436106100dd5760003560e01c80638da5cb5b1161007f578063a9059cbb11610059578063a9059cbb146102c2578063db006a75146102ff578063dd62ed3e14610328578063f340fa0114610365576100dd565b80638da5cb5b1461024357806395d89b411461026e5780639dc29fac14610299576100dd565b806323b872dd116100bb57806323b872dd14610175578063313ce567146101b257806340c10f19146101dd57806370a0823114610206576100dd565b806306fdde03146100e2578063095ea7b31461010d57806318160ddd1461014a575b600080fd5b3480156100ee57600080fd5b506100f7610381565b6040516101049190610e7f565b60405180910390f35b34801561011957600080fd5b50610134600480360381019061012f9190610f3a565b61040f565b6040516101419190610f95565b60405180910390f35b34801561015657600080fd5b5061015f61056f565b60405161016c9190610fbf565b60405180910390f35b34801561018157600080fd5b5061019c60048036038101906101979190610fda565b610575565b6040516101a99190610f95565b60405180910390f35b3480156101be57600080fd5b506101c76106db565b6040516101d49190611049565b60405180910390f35b3480156101e957600080fd5b5061020460048036038101906101ff9190610f3a565b6106e4565b005b34801561021257600080fd5b5061022d60048036038101906102289190611064565b610782565b60405161023a9190610fbf565b60405180910390f35b34801561024f57600080fd5b5061025861079a565b60405161026591906110a0565b60405180910390f35b34801561027a57600080fd5b506102836107c0565b6040516102909190610e7f565b60405180910390f35b3480156102a557600080fd5b506102c060048036038101906102bb9190610f3a565b61084e565b005b3480156102ce57600080fd5b506102e960048036038101906102e49190610f3a565b6108ec565b6040516102f69190610f95565b60405180910390f35b34801561030b57600080fd5b50610326600480360381019061032191906110bb565b610901565b005b34801561033457600080fd5b5061034f600480360381019061034a91906110e8565b61091a565b60405161035c9190610fbf565b60405180910390f35b61037f600480360381019061037a9190611064565b61093f565b005b6001805461038e90611157565b80601f01602080910402602001604051908101604052809291908181526020018280546103ba90611157565b80156104075780601f106103dc57610100808354040283529160200191610407565b820191906000526020600020905b8154815290600101906020018083116103ea57829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361047f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610476906111d4565b60405180910390fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161055d9190610fbf565b60405180910390a36001905092915050565b60005481565b600080600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508281101561063a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063190611240565b60405180910390fd5b8281610646919061128f565b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506106d185858561094c565b9150509392505050565b60006012905090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610774576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076b9061130f565b60405180910390fd5b61077e8282610b58565b5050565b60036020528060005260406000206000915090505481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600280546107cd90611157565b80601f01602080910402602001604051908101604052809291908181526020018280546107f990611157565b80156108465780601f1061081b57610100808354040283529160200191610846565b820191906000526020600020905b81548152906001019060200180831161082957829003601f168201915b505050505081565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d59061137b565b60405180910390fd5b6108e88282610c9f565b5050565b60006108f933848461094c565b905092915050565b61090c333083610575565b506109173082610c9f565b50565b6004602052816000526040600020602052806000526040600020600091509150505481565b6109498134610b58565b50565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036109bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b3906113e7565b60405180910390fd5b6000600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828111610a42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3990611453565b60405180910390fd5b8281610a4e919061128f565b600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ae09190611473565b925050819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef85604051610b449190610fbf565b60405180910390a360019150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610bc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbe90611515565b60405180910390fd5b80600080828254610bd89190611473565b9250508190555080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c2e9190611473565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610c939190610fbf565b60405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0590611581565b60405180910390fd5b80600080828254610d1f919061128f565b9250508190555080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d75919061128f565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610dda9190610fbf565b60405180910390a35050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e20578082015181840152602081019050610e05565b83811115610e2f576000848401525b50505050565b6000601f19601f8301169050919050565b6000610e5182610de6565b610e5b8185610df1565b9350610e6b818560208601610e02565b610e7481610e35565b840191505092915050565b60006020820190508181036000830152610e998184610e46565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ed182610ea6565b9050919050565b610ee181610ec6565b8114610eec57600080fd5b50565b600081359050610efe81610ed8565b92915050565b6000819050919050565b610f1781610f04565b8114610f2257600080fd5b50565b600081359050610f3481610f0e565b92915050565b60008060408385031215610f5157610f50610ea1565b5b6000610f5f85828601610eef565b9250506020610f7085828601610f25565b9150509250929050565b60008115159050919050565b610f8f81610f7a565b82525050565b6000602082019050610faa6000830184610f86565b92915050565b610fb981610f04565b82525050565b6000602082019050610fd46000830184610fb0565b92915050565b600080600060608486031215610ff357610ff2610ea1565b5b600061100186828701610eef565b935050602061101286828701610eef565b925050604061102386828701610f25565b9150509250925092565b600060ff82169050919050565b6110438161102d565b82525050565b600060208201905061105e600083018461103a565b92915050565b60006020828403121561107a57611079610ea1565b5b600061108884828501610eef565b91505092915050565b61109a81610ec6565b82525050565b60006020820190506110b56000830184611091565b92915050565b6000602082840312156110d1576110d0610ea1565b5b60006110df84828501610f25565b91505092915050565b600080604083850312156110ff576110fe610ea1565b5b600061110d85828601610eef565b925050602061111e85828601610eef565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061116f57607f821691505b60208210810361118257611181611128565b5b50919050565b7f617070726f766520746f207a65726f2061646472657373000000000000000000600082015250565b60006111be601783610df1565b91506111c982611188565b602082019050919050565b600060208201905081810360008301526111ed816111b1565b9050919050565b7f616d6f756e74206578636565647320616c6c6f77616e63650000000000000000600082015250565b600061122a601883610df1565b9150611235826111f4565b602082019050919050565b600060208201905081810360008301526112598161121d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061129a82610f04565b91506112a583610f04565b9250828210156112b8576112b7611260565b5b828203905092915050565b7f6f6e6c79206f776e65722063616e206d696e7400000000000000000000000000600082015250565b60006112f9601383610df1565b9150611304826112c3565b602082019050919050565b60006020820190508181036000830152611328816112ec565b9050919050565b7f6f6e6c79206f776e65722063616e206275726e00000000000000000000000000600082015250565b6000611365601383610df1565b91506113708261132f565b602082019050919050565b6000602082019050818103600083015261139481611358565b9050919050565b7f7472616e7366657220746f20746865207a65726f206164647265737300000000600082015250565b60006113d1601c83610df1565b91506113dc8261139b565b602082019050919050565b60006020820190508181036000830152611400816113c4565b9050919050565b7f7472616e7366657220616d6f756e7420657863656564732062616c616e636500600082015250565b600061143d601f83610df1565b915061144882611407565b602082019050919050565b6000602082019050818103600083015261146c81611430565b9050919050565b600061147e82610f04565b915061148983610f04565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156114be576114bd611260565b5b828201905092915050565b7f6d696e7420746f207a65726f2061646472657373000000000000000000000000600082015250565b60006114ff601483610df1565b915061150a826114c9565b602082019050919050565b6000602082019050818103600083015261152e816114f2565b9050919050565b7f6275726e20746f207a65726f2061646472657373000000000000000000000000600082015250565b600061156b601483610df1565b915061157682611535565b602082019050919050565b6000602082019050818103600083015261159a8161155e565b905091905056fea264697066735822122098d6655f7693c1e87bae9e2c8819dc7660cc4b3524350513323f67736da6898764736f6c634300080d0033";

type DepositorCoinConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DepositorCoinConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DepositorCoin__factory extends ContractFactory {
  constructor(...args: DepositorCoinConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DepositorCoin> {
    return super.deploy(overrides || {}) as Promise<DepositorCoin>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DepositorCoin {
    return super.attach(address) as DepositorCoin;
  }
  override connect(signer: Signer): DepositorCoin__factory {
    return super.connect(signer) as DepositorCoin__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DepositorCoinInterface {
    return new utils.Interface(_abi) as DepositorCoinInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DepositorCoin {
    return new Contract(address, _abi, signerOrProvider) as DepositorCoin;
  }
}
